diff --git a/Mopy/bash/bolt.py b/Mopy/bash/bolt.py
index 420ea49..3c393d5 100644
--- a/Mopy/bash/bolt.py
+++ b/Mopy/bash/bolt.py
@@ -26,6 +26,7 @@
 from __future__ import with_statement
 #--Standard
 import cPickle
+import StringIO
 import copy
 import locale
 import os
@@ -173,7 +174,8 @@ if os.path.exists(languagePkl):
     _translator = cPickle.load(pklFile)
     pklFile.close()
     def _(text,encode=True):
-        text = Encode(text,'mbcs')
+        #text = Encode(text,'mbcs')
+        if isinstance(text,unicode): text = text.encode('mbcs')
         if encode: text = reEscQuote.sub("'",text.encode('string_escape'))
         head,core,tail = reTrans.match(text).groups()
         if core and core in _translator:
@@ -807,6 +809,15 @@ class LString(object):
         if isinstance(other,LString): return cmp(self._cs, other._cs)
         else: return cmp(self._cs, other.lower())
 
+# sio - StringIO wrapper so it uses the 'with' statement, so they can be used
+#  in the same functions that accept files as input/output as well.  Really,
+#  StringIO objects don't need to 'close' ever, since the data is unallocated
+#  once the object is destroyed.
+#------------------------------------------------------------------------------
+class sio(StringIO.StringIO):
+    def __enter__(self): return self
+    def __exit__(self,*args,**kwdargs): self.close()
+
 # Paths -----------------------------------------------------------------------
 #------------------------------------------------------------------------------
 _gpaths = {}
@@ -1026,7 +1037,7 @@ class Path(object):
         "Backup file path."
         return self+'.bak'
 
-    #--size, atim, ctime
+    #--size, atime, ctime
     @property
     def size(self):
         "Size of file or directory."
@@ -1041,9 +1052,9 @@ class Path(object):
             try:
                 return os.path.getsize(self._s)
             except WindowsError, werr:
-                    if werr.winerror != 123: raise
-                    deprint(_("Unable to determine size of %s - probably a unicode error") % self._s)
-                    return 0
+                if werr.winerror != 123: raise
+                deprint(_("Unable to determine size of %s - probably a unicode error") % self._s)
+                return 0
     @property
     def atime(self):
         try:
@@ -1097,6 +1108,29 @@ class Path(object):
             deprint(_("Unable to set modified time of %s - probably a unicode error") % self._s)
     mtime = property(getmtime,setmtime,doc="Time file was last modified.")
 
+    @property
+    def version(self):
+        """File version (exe/dll) embeded in the file properties (windows only)."""
+        try:
+            import win32api
+            info = win32api.GetFileVersionInfo(self.s,u'\\')
+            ms = info['FileVersionMS']
+            ls = info['FileVersionLS']
+            version = (win32api.HIWORD(ms),win32api.LOWORD(ms),win32api.HIWORD(ls),win32api.LOWORD(ls))
+        except:
+            version = (0,0,0,0)
+        return version
+
+    @property
+    def strippedVersion(self):
+        """.version with leading and trailing zeros stripped."""
+        version = list(self.version)
+        while len(version) > 1 and version[0] == 0:
+            version.pop(0)
+        while len(version) > 1 and version[-1] == 0:
+            version.pop()
+        return tuple(version)
+
     #--crc
     @property
     def crc(self):
@@ -1258,6 +1292,13 @@ class Path(object):
                 else:
                     os.remove(self._s)
             shutil.move(self.temp._s, self._s)
+    def editable(self):
+        """Safely check whether a file is editable."""
+        try:
+            with open(self._s,'ab') as f:
+                return True
+        except:
+            return False
 
     #--Hash/Compare
     def __hash__(self):
@@ -1444,7 +1485,7 @@ class DataDict:
             return self.data[key]
         else:
             if isinstance(key, Path):
-                return self.data[Path('Oblivion.esm')]
+                return self.data[Path('Fallout3.esm')]
     def __setitem__(self,key,value):
         self.data[key] = value
     def __delitem__(self,key):
@@ -1819,7 +1860,7 @@ class PickleDict:
                         self.data.update(header)
                     ins.close()
                     return 1 + (path == self.backup)
-                except EOFError:
+                except (EOFError, ValueError):
                     if ins: ins.close()
         #--No files and/or files are corrupt
         return 0
