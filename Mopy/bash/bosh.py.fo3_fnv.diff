diff --git a/Mopy/bash/bosh.py b/Mopy/bash/bosh.py
index a5000f0..c8a38ec 100644
--- a/Mopy/bash/bosh.py
+++ b/Mopy/bash/bosh.py
@@ -7547,6 +8116,7 @@ class SaveHeader:
     """Represents selected info from a Tes4SaveGame file."""
     def __init__(self,path=None):
         """Initialize."""
+        self.language = None
         self.pcName = None
         self.pcNick = None
         self.pcLocation = None
@@ -7564,6 +8134,8 @@ class SaveHeader:
             ins.seek(11) # FO3SAVEGAME
             headerSize, = struct.unpack('I',ins.read(4))
             unknown,delim = struct.unpack('Ic',ins.read(5))
+            self.language = cstrip(ins.read(64))
+            delim, = struct.unpack('c',ins.read(1))
             ssWidth,delim1,ssHeight,delim2,ssDepth,delim3 = struct.unpack('=IcIcIc',ins.read(15))
             #--Name, nickname, level, location, playtime
             size,delim = struct.unpack('Hc',ins.read(3))
@@ -7584,8 +8156,8 @@ class SaveHeader:
             self.image = (ssWidth,ssHeight,ssData)
             #--Masters
             unknown,masterListSize = struct.unpack('=BI',ins.read(5))
-            if unknown != 0x15:
-                raise "%s: Unknown byte is not 0x15." % path
+            if unknown != 0x1B:
+                raise "%s: Unknown byte is not 0x1B." % path
             del self.masters[:]
             numMasters,delim = struct.unpack('Bc',ins.read(2))
             for count in range(numMasters):
@@ -7614,15 +8186,16 @@ class SaveHeader:
         size, = unpack('I',4)
         pack('I',size)
         out.write(ins.read(5))
+        out.write(ins.read(65))
         ssWidth,delim1,ssHeight,delim2 = unpack('=IcIc',10)
         pack('=IcIc',ssWidth,delim1,ssHeight,delim2)
-        out.write(ins.read(size-15))
+        out.write(ins.read(size-80))
         #--Image Data
         out.write(ins.read(3*ssWidth*ssHeight))
         #--Skip old masters
         unknown,oldMasterListSize = unpack('=BI',5)
-        if unknown != 0x15:
-            raise "%s: Unknown byte is not 0x15." % path
+        if unknown != 0x1B:
+            raise "%s: Unknown byte is not 0x1B." % path
         numMasters,delim = unpack('Bc',2)
         oldMasters = []
         for count in range(numMasters):
@@ -8559,12 +9132,13 @@ class BsaFile:
         """Reset dates of bsa files to 'correct' values."""
         #--Fix the data of a few archive files
         bsaTimes = (
-            ('Fallout - MenuVoices.bsa',1138575220),
-            ('Fallout - Meshes.bsa',1139433736),
-            ('Fallout - Misc.bsa',1138660560),
-            ('Fallout - Sound.bsa',1138162634),
+            ('Fallout - Meshes.bsa',1138575220),
+            ('Fallout - Misc.bsa',1139433736),
+            ('Fallout - Sound.bsa',1138660560),
             (inisettings['FalloutTexturesBSAName'].stail,1138162634),
-            ('Fallout - Voices.bsa',1138166742),
+            ('Fallout - Textures.bsa',1138162634),
+            ('Fallout - Textures2.bsa',1138162934),
+            ('Fallout - Voices1.bsa',1138166742),
             )
         for bsaFile,mtime in bsaTimes:
             dirs['mods'].join(bsaFile).mtime = mtime
@@ -9012,7 +9590,7 @@ class FOSEIniFile(IniFile):
 #--------------------------------------------------------------------------------
 class FalloutIni(IniFile):
     """FALLOUT.INI file."""
-    bsaRedirectors = set(('archiveinvalidationinvalidated!.bsa',r'..\fomm\bsaredirection.bsa'))
+    bsaRedirectors = set(('fallout - ai!.bsa',))
 
     def __init__(self):
         """Initialize."""
@@ -9060,7 +9638,7 @@ class FalloutIni(IniFile):
 
     def setBsaRedirection(self,doRedirect=True):
         """Activates or deactivates BSA redirection."""
-        aiBsa = dirs['mods'].join('ArchiveInvalidationInvalidated!.bsa')
+        aiBsa = dirs['mods'].join('Fallout - AI!.bsa')
         aiBsaMTime = time.mktime((2006, 1, 2, 0, 0, 0, 0, 2, 0))
         if aiBsa.exists() and aiBsa.mtime >  aiBsaMTime:
             aiBsa.mtime = aiBsaMTime
@@ -9070,7 +9648,7 @@ class FalloutIni(IniFile):
         archives = [x.strip() for x in sArchives.split(',') if x.strip().lower() not in self.bsaRedirectors]
         #--Add redirector back in?
         if doRedirect:
-            archives.insert(0,'ArchiveInvalidationInvalidated!.bsa')
+            archives.insert(0,'Fallout - AI!.bsa')
         sArchives = ', '.join(archives)
         self.saveSetting('Archive','sArchiveList',sArchives)
 
@@ -9081,6 +9659,13 @@ class FalloutPrefsIni(FalloutIni):
         """Initialize."""
         IniFile.__init__(self,dirs['saveBase'].join('FalloutPrefs.ini'),'General')
 
+#--------------------------------------------------------------------------------
+class FalloutDefaultIni(FalloutIni):
+    """Fallout_default.ini file."""
+    def __init__(self):
+        """Initialize."""
+        IniFile.__init__(self,dirs['app'].join('Fallout_default.ini'),'General')
+
 #------------------------------------------------------------------------------
 class OmodFile:
     """Class for extracting data from omods."""
@@ -10259,7 +10844,7 @@ class ResourceReplacer:
         'fonts': ['.fnt', '.tex'],
         'menus': ['.bat', '.html', '.scc', '.txt', '.xml'],
         'meshes': ['.egm', '.egt', '.fim', '.kf', '.kfm', '.nif', '.tri', '.txt'],
-        'fose':['.dll','.dlx','.txt','.mp3'],
+        'nvse':['.dll','.dlx','.txt','.mp3'],
         'shaders': ['.sdp','.fx'],
         'sound': ['.lip', '.mp3', '.wav'],
         'textures': ['.dds', '.ifl', '.psd', '.txt'],
@@ -10397,12 +10982,12 @@ class ResourceReplacer:
         aiModsPath.remove()
         #--Fix the data of a few archive files
         bsaTimes = (
-            ('Fallout - MenuVoices.bsa',1138575220),
-            ('Fallout - Meshes.bsa',1139433736),
-            ('Fallout - Misc.bsa',1138660560),
-            ('Fallout - Sound.bsa',1138162634),
+            ('FalloutNV - Meshes.bsa',1138575220),
+            ('FalloutNV - Misc.bsa',1139433736),
+            ('FalloutNV - Sounds.bsa',1138660560),
             (inisettings['FalloutTexturesBSAName'],1138162634),
-            ('Fallout - Voices.bsa',1138162934),
+            ('FalloutNV - Voices1.bsa',1138162934),
+            ('FalloutNV - Voices2.bsa',1138166742),
             )
         for bsaFile,mtime in bsaTimes:
             bsaPath = dirs['mods'].join(bsaFile)
@@ -10460,9 +11045,8 @@ class ModInfos(FileInfos):
         self.group_header = {}
         #--Fallout version
         self.version_voSize = {
-            '1.0':int(_("288769595")),
-            '1.1':int(_("288771181")),
-            '1.4':int(_("288771262")),
+            '1.0':int(_("245570393")),
+            '1.4':int(_("245650747")),
             }
         self.size_voVersion = bolt.invertDict(self.version_voSize)
         self.voCurrent = None
@@ -11170,10 +11754,10 @@ class ModInfos(FileInfos):
                         requires[key] = float(value or 0)
         return requires
 
-    #--Fallout3 1.0/1.1/1.4 Swapping -----------------------------------------------
+    #--FalloutNV 1.0/1.4 Swapping -----------------------------------------------
     def getFalloutVersions(self):
         """Returns tuple of Fallout(3|NV) versions."""
-        reFallout = re.compile('^Fallout3(|_1.0|_1.1|_1.4).esm$')
+        reFallout = re.compile('^FalloutNV(|_1.0|_1.1|_1.2|_1.3|_1.4).esm$')
         self.voAvailable.clear()
         for name,info in self.data.iteritems():
             maFallout = reFallout.match(name.s)
@@ -17089,9 +17683,9 @@ class CompleteItemData:
         self.type_stats = {'ALCH':{},'AMMO':{},'ARMO':{},'ARMA':{},'BOOK':{},'INGR':{},'KEYM':{},'LIGH':{},'MISC':{},'WEAP':{}}
         self.type_attrs = {
             'ALCH':('eid', 'full', 'weight', 'value', 'largeIconPath', 'smallIconPath'),
-            'AMMO':('eid', 'full', 'speed',  'value', 'clipRounds', 'largeIconPath', 'smallIconPath'),
-            'ARMO':('eid', 'full', 'weight', 'value', 'health', 'ar', 'maleLargeIconPath', 'maleSmallIconPath', 'femaleLargeIconPath', 'femaleSmallIconPath'),
-            'ARMA':('eid', 'full', 'weight', 'value', 'health', 'ar', 'maleLargeIconPath', 'maleSmallIconPath', 'femaleLargeIconPath', 'femaleSmallIconPath'),
+            'AMMO':('eid', 'full', 'weight', 'value', 'speed', 'clipRounds', 'projPerShot', 'largeIconPath', 'smallIconPath'),
+            'ARMO':('eid', 'full', 'weight', 'value', 'health', 'ar', 'dt', 'maleLargeIconPath', 'maleSmallIconPath', 'femaleLargeIconPath', 'femaleSmallIconPath'),
+            'ARMA':('eid', 'full', 'weight', 'value', 'health', 'ar', 'dt', 'maleLargeIconPath', 'maleSmallIconPath', 'femaleLargeIconPath', 'femaleSmallIconPath'),
             'BOOK':('eid', 'full', 'weight', 'value', 'largeIconPath', 'smallIconPath'),
             'INGR':('eid', 'full', 'weight', 'value', 'iconPath'),
             'KEYM':('eid', 'full', 'weight', 'value', 'largeIconPath', 'smallIconPath'),
@@ -17102,7 +17696,10 @@ class CompleteItemData:
                     'minRange','maxRange','animationAttackMultiplier','fireRate','overrideActionPoint','rumbleLeftMotorStrength',
                     'rumbleRightMotorStrength','rumbleDuration','overrideDamageToWeaponMult','attackShotsPerSec',
                     'reloadTime','jamTime','aimArc','rambleWavelangth','limbDmgMult','sightUsage',
-                    'semiAutomaticFireDelayMin','semiAutomaticFireDelayMax','criticalDamage','criticalMultiplier',
+                    'semiAutomaticFireDelayMin','semiAutomaticFireDelayMax',
+                    'strengthReq','regenRate','killImpulse','impulseDist','skillReq',
+                    'criticalDamage','criticalMultiplier',
+                    'vatsSkill','vatsDamMult','vatsAp',
                     'largeIconPath', 'smallIconPath'),
             }
         self.aliases = aliases or {} #--For aliasing mod fulls
@@ -17229,16 +17826,16 @@ class CompleteItemData:
                     zip((str,sfloat,int,str,str),fields[4:9]))
             elif type == 'AMMO':
                 ammo[longid] = (eid,) + tuple(func(field) for func,field in
-                    #--(speed, value, clipRounds)
-                    zip((str,sfloat,int,int,str,str),fields[4:10]))
+                    #--(weight, value, speed, clipRounds, projPerShot)
+                    zip((str,sfloat,int,sfloat,int,int,str,str),fields[4:12]))
             elif type == 'ARMO':
                 armor[longid] = (eid,) + tuple(func(field) for func,field in
-                    #--(weight, value, health, ar)
-                    zip((str,sfloat,int,int,int,str,str,str,str),fields[4:13]))
+                    #--(weight, value, health, ar, dt)
+                    zip((str,sfloat,int,int,int,int,str,str,str,str),fields[4:14]))
             elif type == 'ARMA':
                 armoraddon[longid] = (eid,) + tuple(func(field) for func,field in
-                    #--(weight, value, health, ar)
-                    zip((str,sfloat,int,int,int,str,str,str,str),fields[4:13]))
+                    #--(weight, value, health, ar, dt)
+                    zip((str,sfloat,int,int,int,int,str,str,str,str),fields[4:14]))
             elif type == 'BOOK':
                 books[longid] = (eid,) + tuple(func(field) for func,field in
                     #--(weight, value)
@@ -17266,13 +17863,20 @@ class CompleteItemData:
                     #-- minRange, maxRange, animationAttackMultiplier, fireRate, overrideActionPoint, rumbleLeftMotorStrength,
                     #-- rumbleRightMotorStrength, rumbleDuration, overrideDamageToWeaponMult, attackShotsPerSec,
                     #-- reloadTime, jamTime, aimArc, rambleWavelangth, limbDmgMult, sightUsage,
-                    #-- semiAutomaticFireDelayMin, semiAutomaticFireDelayMax, criticalDamage, criticalMultiplier)
+                    #-- semiAutomaticFireDelayMin, semiAutomaticFireDelayMax,
+                    #-- strengthReq, regenRate, killImpulse, impulseDist, skillReq,
+                    #-- criticalDamage, criticalMultiplier,
+                    #-- vatsSkill, vatsDamMult, vatsAp)
                     zip((str,sfloat,int,int,int,int,
                          sfloat,sfloat,int,sfloat,sfloat,sfloat,int,int,
                          sfloat,sfloat,sfloat,sfloat,sfloat,sfloat,
                          sfloat,sfloat,sfloat,sfloat,
                          sfloat,sfloat,sfloat,sfloat,sfloat,sfloat,
-                         sfloat,sfloat,int,sfloat,str,str),fields[4:40]))
+                         sfloat,sfloat,
+                         int,sfloat,sfloat,sfloat,int,
+                         int,sfloat,
+                         sfloat,sfloat,sfloat,
+                         str,str),fields[4:48]))
         ins.close()
 
     def writeToText(self,textPath):
@@ -17290,19 +17894,19 @@ class CompleteItemData:
                     ('"' + '","'.join((_('Type'),_('Mod Name'),_('ObjectIndex'),
                     _('Editor Id'),_('Name'),_('Weight'),_('Value'),_('Large Icon Path'),_('Small Icon Path'),_('Model'))) + '"\n')),
                 #Ammo
-                ('AMMO', bolt.csvFormat('ssfiisss')+'\n',
+                ('AMMO', bolt.csvFormat('ssfifiisss')+'\n',
                     ('"' + '","'.join((_('Type'),_('Mod Name'),_('ObjectIndex'),
-                    _('Editor Id'),_('Name'),_('Speed'),_('Value'),_('Clip Rounds'),_('Large Icon Path'),_('Small Icon Path'),_('Model'))) + '"\n')),
+                    _('Editor Id'),_('Name'),_('Weight'),_('Value'),_('Speed'),_('Clip Rounds'),_('Proj/Shot'),_('Large Icon Path'),_('Small Icon Path'),_('Model'))) + '"\n')),
                 #--Armor
-                ('ARMO', bolt.csvFormat('ssfiiissssssss')+'\n',
+                ('ARMO', bolt.csvFormat('ssfiiiissssssss')+'\n',
                     ('"' + '","'.join((_('Type'),_('Mod Name'),_('ObjectIndex'),
-                    _('Editor Id'),_('Name'),_('Weight'),_('Value'),_('Health'),_('AR'),
+                    _('Editor Id'),_('Name'),_('Weight'),_('Value'),_('Health'),_('AR'),_('DT'),
                     _('Male Large Icon Path'),_('Male Small Icon Path'),_('Female Large Icon Path'),_('Female Small Icon Path'),
                     _('Male Model Path'),_('Female Model Path'),_('Male World Model Path'),_('Female World Model Path'))) + '"\n')),
                 #--Armor Addon
-                ('ARMA', bolt.csvFormat('ssfiiissssssss')+'\n',
+                ('ARMA', bolt.csvFormat('ssfiiiissssssss')+'\n',
                     ('"' + '","'.join((_('Type'),_('Mod Name'),_('ObjectIndex'),
-                    _('Editor Id'),_('Name'),_('Weight'),_('Value'),_('Health'),_('AR'),
+                    _('Editor Id'),_('Name'),_('Weight'),_('Value'),_('Health'),_('AR'),_('DT'),
                     _('Male Large Icon Path'),_('Male Small Icon Path'),_('Female Large Icon Path'),_('Female Small Icon Path'),
                     _('Male Model Path'),_('Female Model Path'),_('Male World Model Path'),_('Female World Model Path'))) + '"\n')),
                 #Books
@@ -17326,7 +17930,7 @@ class CompleteItemData:
                     ('"' + '","'.join((_('Type'),_('Mod Name'),_('ObjectIndex'),
                     _('Editor Id'),_('Name'),_('Weight'),_('Value'),_('Large Icon Path'),_('Small Icon Path'),_('Model'))) + '"\n')),
                 #--Weapons
-                ('WEAP', bolt.csvFormat('ssfiiiiffifffiiffffffffffffffffffifssssss')+'\n',
+                ('WEAP', bolt.csvFormat('ssfiiiiffifffiiffffffffffffffffffifffiiffffssssss')+'\n',
                     ('"' + '","'.join((_('Type'),_('Mod Name'),_('ObjectIndex'),
                     _('Editor Id'),_('Name'),_('Weight'),_('Value'),_('Health'),_('Damage'),_('Clip Size'),
                     _('Animation Multiplier'), _('Reach'), _('Ammo Use'), _('Min Spread'), _('Spread'), _('Sight Fov'), _('Base VATS To-Hit Chance'), _('Projectile Count'),
@@ -17334,7 +17938,9 @@ class CompleteItemData:
                     _('rRmble - Right Motor Strength'), _('Rumble - Duration'), _('Override - Damage To Weapon Mult'), _('Attack Shots/Sec'),
                     _('Reload Time'), _('Jam Time'), _('Aim Arc'), _('Ramble - Wavelangth'), _('Limb Dmg Mult'), _('Sight Usage'),
                     _('Semi-Automatic Fire Delay Min'), _('Semi-Automatic Fire Delay Max'),
+                    _('Strength Req'), _('Regen Rate'), _('Kill Impulse'), _('Impulse Dist'), _('Skill Req'),
                     _('Critical Damage'), _('Crit % Mult'),
+                    _('VATS Skill'), _('VATS Dam. Mult'), _('VATS AP'),
                     _('Large Icon Path'),_('Small Icon Path'),_('Model'),_('Shell Casing Model'),_('Scope Model'),_('World Model'))) + '"\n')),
                 ):
                 stats = self.type_stats[type]
@@ -22053,18 +22662,24 @@ class GraphicsPatcher(ImportPatcher):
         recFidAttrs_class = self.recFidAttrs_class = {}
         for recClass in (MreBsgn,MreLscr, MreClas, MreLtex, MreRegn):
             recAttrs_class[recClass] = ('iconPath',)
-        for recClass in (MreActi, MreDoor, MreFlor, MreFurn, MreGras, MreStat, MreMstt, MreBptd, MreTerm, MrePwat, MreHdpt, MreTact):
+        for recClass in (MreActi, MreDoor, MreFlor, MreFurn, MreGras, MreStat, MreMstt, MrePwat, MreHdpt, MreTact, MreDobj):
             recAttrs_class[recClass] = ('model',)
         for recClass in (MreLigh,):
             recAttrs_class[recClass] = ('iconPath','model')
         for recClass in (MreMicn,):
             recAttrs_class[recClass] = ('largeIconPath','smallIconPath')
-        for recClass in (MreAlch, MreAmmo, MreAppa, MreBook, MreIngr, MreKeym, MreMisc, MreSgst, MreSlgm, MreTree):
+        for recClass in (MreRepu,):
+            recAttrs_class[recClass] = ('largeIconPath','smallIconPath')
+        for recClass in (MreCsno,):
+            recAttrs_class[recClass] = ('chipModels','slotMachineModel','blackjackTableModel','rouletteTableModel','slotReelTextures','blackjackDecks')
+        for recClass in (MreAlch, MreAmmo, MreAppa, MreBook, MreIngr, MreKeym, MreMisc, MreSgst, MreSlgm, MreTree, MreCmny, MreImod, MreChip):
             recAttrs_class[recClass] = ('largeIconPath','smallIconPath','model')
         for recClass in (MreNote,):
             recAttrs_class[recClass] = ('largeIconPath','smallIconPath','model','texture')
+        for recClass in (MreCcrd,):
+            recAttrs_class[recClass] = ('largeIconPath','smallIconPath','model','textureFace','textureBack')
         for recClass in (MreWeap,):
-            recAttrs_class[recClass] = ('largeIconPath','smallIconPath','model','shellCasingModel','scopeModel','worldModel','firstPersonModel','animationType','gripAnimation','reloadAnimation')
+            recAttrs_class[recClass] = ('largeIconPath','smallIconPath','model','shellCasingModel','scopeModel','worldModel','firstPersonModel','animationType','gripAnimation','reloadAnimation','modelWithMods','firstPersonModelWithMods')
         for recClass in (MreArmo, MreArma, MreClot):
             recAttrs_class[recClass] = ('maleBody','maleWorld','maleLargeIconPath','maleSmallIconPath','femaleBody','femaleWorld','femaleLargeIconPath','femaleSmallIconPath','flags')
         for recClass in (MreCrea,):
@@ -22096,7 +22711,7 @@ class GraphicsPatcher(ImportPatcher):
         for recClass in (MreProj,):
             recAttrs_class[recClass] = ('model','light','muzzleFlash','explosion','muzzleFlashDuration','fadeDuration','muzzleFlashPath')
         #--Needs Longs
-        self.longTypes = set(('BSGN','LSCR','CLAS','LTEX','REGN','ACTI','DOOR','FLOR','FURN','GRAS','STAT','ALCH','AMMO','BOOK','INGR','KEYM','LIGH','MISC','SGST','SLGM','WEAP','TREE','ARMO','ARMA','CLOT','CREA','MGEF','EFSH','TXST','EXPL','IPCT','IPDS','PROJ','NOTE','TACT','HDPT'))
+        self.longTypes = set(('BSGN','LSCR','CLAS','LTEX','REGN','ACTI','DOOR','FLOR','FURN','GRAS','STAT','ALCH','AMMO','BOOK','INGR','KEYM','LIGH','MISC','SGST','SLGM','WEAP','TREE','ARMO','ARMA','CLOT','CREA','MGEF','EFSH','TXST','EXPL','IPCT','IPDS','PROJ','NOTE','TACT','CMNY','CCRD','IMOD','REPU','HDPT','MSTT','CHIP','CSNO','PWAT','DOBJ'))
 
     def initData(self,progress):
         """Get graphics from source files."""
@@ -23784,9 +24399,9 @@ class ImportScripts(ImportPatcher):
         self.isActive = len(self.sourceMods) != 0
         #--Type Fields
         recAttrs_class = self.recAttrs_class = {}
-        for recClass in (MreWeap,MreActi,MreAlch,MreArmo,MreBook,MreCont,MreCrea,MreDoor,MreFlor,MreFurn,MreIngr,MreKeym,MreLigh,MreMisc,MreNpc,MreQust,MreTerm,MreTact):
+        for recClass in (MreWeap,MreActi,MreAlch,MreArmo,MreBook,MreCont,MreCrea,MreDoor,MreFlor,MreFurn,MreIngr,MreKeym,MreLigh,MreMisc,MreNpc,MreQust,MreTerm,MreTact,MreCcrd):
             recAttrs_class[recClass] = ('script',)
-        self.longTypes = set(('WEAP','ACTI','ALCH','ARMO','BOOK','CONT','CREA','DOOR','FLOR','FURN','INGR','KEYM','LIGH','MISC','NPC_','QUST','TERM','TACT'))
+        self.longTypes = set(('WEAP','ACTI','ALCH','ARMO','BOOK','CONT','CREA','DOOR','FLOR','FURN','INGR','KEYM','LIGH','MISC','NPC_','QUST','TERM','TACT','CCRD'))
 
     def initData(self,progress):
         """Get script links from source files."""
@@ -25256,8 +25871,10 @@ class SoundPatcher(ImportPatcher):
         for recClass in (MreMgef,):
             recAttrs_class[recClass] = ('castingSound','boltSound','hitSound','areaSound')
         for recClass in (MreActi,):
-            recAttrs_class[recClass] = ('soundLooping','soundActivation')
-        for recClass in (MreLigh,MreTact):
+            recAttrs_class[recClass] = ('soundLooping','soundActivation','radioTemplate')
+        for recClass in (MreTact,):
+            recAttrs_class[recClass] = ('sound','radioTemplate')
+        for recClass in (MreLigh,):
             recAttrs_class[recClass] = ('sound',)
         for recClass in (MreWthr,):
             recAttrs_class[recClass] = ('sounds',)
@@ -25272,7 +25889,8 @@ class SoundPatcher(ImportPatcher):
         for recClass in (MreAspc,):
             recAttrs_class[recClass] = ('soundLooping','useSoundFromRegion','environmentType')
         for recClass in (MreWeap,):
-            recAttrs_class[recClass] = ('soundGunShot3D','soundGunShot2D','soundGunShot3DLooping','soundLevel')
+            recAttrs_class[recClass] = ('soundGunShot3D','soundGunShot2D','soundGunShot3DLooping','soundMeleeSwingGunNoAmmo',
+                                        'soundBlock','soundMod1Shoot3Ds','soundMod1Shoot2D','soundLevel')
         #--Needs Longs
         self.longTypes = set(('MGEF','ACTI','TACT','LIGH','WTHR','CONT','DOOR','EXPL','IPCT','PROJ','ASPC','WEAP','REGN'))
 
@@ -25883,9 +26501,10 @@ class DestructiblePatcher(ImportPatcher):
         #--Type Fields
         recAttrs_class = self.recAttrs_class = {}
         recFidAttrs_class = self.recFidAttrs_class = {}
-        for recClass in (MreActi,MreAlch,MreAmmo,MreBook,MreCont,MreCrea,MreDoor,MreFurn,MreKeym,MreMisc,MreNpc,MreWeap,MreProj,MreMstt,MreTerm,MreTact):
+        for recClass in (MreActi,MreAlch,MreAmmo,MreBook,MreCont,MreCrea,MreDoor,MreFurn,MreKeym,MreMisc,MreNpc,MreWeap,MreProj,MreMstt,MreTerm,MreTact,MreImod):
             recAttrs_class[recClass] = ('destructible',)
-        self.longTypes = set(('ACTI','ALCH','AMMO','BOOK','CONT','CREA','DOOR','FURN','KEYM','MISC','NPC','WEAP','PROJ','MSTT','TERM','TACT'))
+        self.longTypes = set(('ACTI','ALCH','AMMO','BOOK','CONT','CREA','DOOR','FURN','KEYM','MISC','NPC','WEAP','PROJ','MSTT','TERM','TACT','IMOD'))
+        #self.longTypes = set(('ACTI','ALCH','AMMO','ARMO','BOOK','CONT','CREA','DEBR','DIAL','DOOR','ENCH','EXPL','FACT','FLOR','FLST','FURN','INFO','INGR','IPDS','KEYM','LIGH','MGEF','MISC','MSTT','NOTE','NPC_','PROJ','QUST','REFR','SCPT','SOUN','SPEL','STAT','TERM','TXST','WATR','WEAP','TACT','IMOD','CHIP'))
 
     def initData(self,progress):
         """Get graphics from source files."""
@@ -26021,6 +26640,183 @@ class DestructiblePatcher(ImportPatcher):
 
 ##class CBash_DestructiblePatcher(CBash_ImportPatcher):
 ##    raise NotImplementedError
+#------------------------------------------------------------------------------
+class WeaponModsPatcher(ImportPatcher):
+    """Merge changes to weapon modifications."""
+    scanOrder = 27
+    editOrder = 27
+    name = _("Import Weapon Modifications")
+    text = _("Merges changes to weapon modifications.")
+    tip = text
+    autoRe = re.compile(r"^UNDEFINED$",re.I)
+    autoKey = 'WeaponMods'
+
+    #--Patch Phase ------------------------------------------------------------
+    def initPatchFile(self,patchFile,loadMods):
+        """Prepare to handle specified patch mod. All functions are called after this."""
+        Patcher.initPatchFile(self,patchFile,loadMods)
+        self.id_data = {} #--Names keyed by long fid.
+        self.srcClasses = set() #--Record classes actually provided by src mods/files.
+        self.sourceMods = self.getConfigChecked()
+        self.isActive = len(self.sourceMods) != 0
+        self.classestemp = set()
+        #--Type Fields
+        recAttrs_class = self.recAttrs_class = {}
+        recFidAttrs_class = self.recFidAttrs_class = {}
+        for recClass in (MreWeap,):
+            recAttrs_class[recClass] = ('modelWithMods','firstPersonModelWithMods','weaponMods','soundMod1Shoot3Ds','soundMod1Shoot2D',
+                                        'effectMod1','effectMod2','effectMod3','valueAMod1','valueAMod2','valueAMod3',
+                                        'valueBMod1','valueBMod2','valueBMod3','reloadAnimationMod','vatsModReqiured','scopeModel',
+                                        'dnamFlags1.hasScope','dnamFlags2.scopeFromMod')
+        self.longTypes = set(('WEAP',))
+        #self.longTypes = set(('WEAP','STAT','IMOD','SOUN'))
+
+    def initData(self,progress):
+        """Get graphics from source files."""
+        if not self.isActive: return
+        id_data = self.id_data
+        recAttrs_class = self.recAttrs_class
+        loadFactory = LoadFactory(False,*recAttrs_class.keys())
+        longTypes = self.longTypes & set(x.classType for x in recAttrs_class)
+        progress.setFull(len(self.sourceMods))
+        cachedMasters = {}
+        for index,srcMod in enumerate(self.sourceMods):
+            temp_id_data = {}
+            if srcMod not in modInfos: continue
+            srcInfo = modInfos[srcMod]
+            srcFile = ModFile(srcInfo,loadFactory)
+            masters = srcInfo.header.masters
+            srcFile.load(True)
+            srcFile.convertToLongFids(longTypes)
+            mapper = srcFile.getLongMapper()
+            for recClass,recAttrs in recAttrs_class.iteritems():
+                if recClass.classType not in srcFile.tops: continue
+                self.srcClasses.add(recClass)
+                self.classestemp.add(recClass)
+                recFidAttrs = self.recFidAttrs_class.get(recClass, None)
+                for record in srcFile.tops[recClass.classType].getActiveRecords():
+                    fid = mapper(record.fid)
+                    if recFidAttrs:
+                        #attr_fidvalue = dict((attr,record.__getattribute__(attr)) for attr in recFidAttrs)
+                        attr_fidvalue = dict((attr,reduce(getattr, attr.split('.'), record)) for attr in recFidAttrs)
+                        for fidvalue in attr_fidvalue.values():
+                            if fidvalue and (fidvalue[0] is None or fidvalue[0] not in self.patchFile.loadSet):
+                                #Ignore the record. Another option would be to just ignore the attr_fidvalue result
+                                mod_skipcount = self.patchFile.patcher_mod_skipcount.setdefault(self.name,{})
+                                mod_skipcount[srcMod] = mod_skipcount.setdefault(srcMod, 0) + 1
+                                break
+                        else:
+                            #temp_id_data[fid] = dict((attr,record.__getattribute__(attr)) for attr in recAttrs)
+                            temp_id_data[fid] = dict((attr,reduce(getattr, attr.split('.'), record)) for attr in recAttrs)
+                            temp_id_data[fid].update(attr_fidvalue)
+                    else:
+                        #temp_id_data[fid] = dict((attr,record.__getattribute__(attr)) for attr in recAttrs)
+                        temp_id_data[fid] = dict((attr,reduce(getattr, attr.split('.'), record)) for attr in recAttrs)
+            for master in masters:
+                if not master in modInfos: continue # or break filter mods
+                if master in cachedMasters:
+                    masterFile = cachedMasters[master]
+                else:
+                    masterInfo = modInfos[master]
+                    masterFile = ModFile(masterInfo,loadFactory)
+                    masterFile.load(True)
+                    masterFile.convertToLongFids(longTypes)
+                    cachedMasters[master] = masterFile
+                mapper = masterFile.getLongMapper()
+                for recClass,recAttrs in recAttrs_class.iteritems():
+                    if recClass.classType not in masterFile.tops: continue
+                    if recClass not in self.classestemp: continue
+                    for record in masterFile.tops[recClass.classType].getActiveRecords():
+                        fid = mapper(record.fid)
+                        if fid not in temp_id_data: continue
+                        for attr, value in temp_id_data[fid].iteritems():
+                            #if value == record.__getattribute__(attr): continue
+                            if value == reduce(getattr, attr.split('.'), record): continue
+                            else:
+                                if fid not in id_data: id_data[fid] = dict()
+                                try:
+                                    id_data[fid][attr] = temp_id_data[fid][attr]
+                                except KeyError:
+                                    id_data[fid].setdefault(attr,value)
+            progress.plus()
+        temp_id_data = None
+        self.longTypes = self.longTypes & set(x.classType for x in self.srcClasses)
+        self.isActive = bool(self.srcClasses)
+
+    def scanModFile(self, modFile, progress):
+        """Scan mod file against source data."""
+        if not self.isActive: return
+        id_data = self.id_data
+        modName = modFile.fileInfo.name
+        mapper = modFile.getLongMapper()
+        if self.longTypes:
+            modFile.convertToLongFids(self.longTypes)
+        for recClass in self.srcClasses:
+            type = recClass.classType
+            if type not in modFile.tops: continue
+            patchBlock = getattr(self.patchFile,type)
+            for record in modFile.tops[type].getActiveRecords():
+                fid = record.fid
+                if not record.longFids: fid = mapper(fid)
+                if fid not in id_data: continue
+                for attr,value in id_data[fid].iteritems():
+                    #if record.__getattribute__(attr) != value:
+                    if reduce(getattr, attr.split('.'), record) != value:
+                        patchBlock.setRecord(record.getTypeCopy(mapper))
+                        break
+
+    def buildPatch(self,log,progress):
+        """Merge last version of record with patched destructible data as needed."""
+        if not self.isActive: return
+        modFile = self.patchFile
+        keep = self.patchFile.getKeeper()
+        id_data = self.id_data
+        type_count = {}
+        for recClass in self.srcClasses:
+            type = recClass.classType
+            if type not in modFile.tops: continue
+            type_count[type] = 0
+            for record in modFile.tops[type].records:
+                fid = record.fid
+                if fid not in id_data: continue
+                for attr,value in id_data[fid].iteritems():
+                    #if isinstance(record.__getattribute__(attr),str) and isinstance(value, str):
+                    if isinstance(reduce(getattr, attr.split('.'), record),str) and isinstance(value, str):
+                        #if record.__getattribute__(attr).lower() != value.lower():
+                        if reduce(getattr, attr.split('.'), record).lower() != value.lower():
+                            break
+                        continue
+                    elif attr == 'model':
+                        try:
+                            #if record.__getattribute__(attr).modPath.lower() != value.modPath.lower():
+                            if reduce(getattr, attr.split('.'), record).modPath.lower() != value.modPath.lower():
+                                break
+                            continue
+                        except:
+                            break #assume they are not equal (ie they aren't __both__ NONE)
+                    #if record.__getattribute__(attr) != value:
+                    if reduce(getattr, attr.split('.'), record) != value:
+                        break
+                else:
+                    continue
+                for attr,value in id_data[fid].iteritems():
+                    #record.__setattr__(attr,value)
+                    sattr = attr.split('.')
+                    lastattr = sattr.pop()
+                    reduce(getattr, sattr, record).__setattr__(lastattr, value)
+                keep(fid)
+                type_count[type] += 1
+        id_data = None
+        log.setHeader('= '+self.__class__.name)
+        log(_("=== Source Mods"))
+        for mod in self.sourceMods:
+            log("* " +mod.s)
+        log(_("\n=== Modified Records"))
+        for type,count in sorted(type_count.iteritems()):
+            if count: log("* %s: %d" % (type,count))
+
+##class CBash_WeaponModsPatcher(CBash_ImportPatcher):
+##    raise NotImplementedError
 # Patchers: 30 ----------------------------------------------------------------
 #------------------------------------------------------------------------------
 # class AssortedTweak_ArmorShows(MultiTweakItem):
@@ -31005,26 +31801,27 @@ class NamesTweak_SortInventory(MultiTweakItem):
         MultiTweakItem.__init__(self,_("Sort Inventory"),
             _('Sort item by category in barter and container screens.'),
             'sortInventory',
-            # weapon,armor,stimpak,chem,food/drink,ammo
-            (_('Chem>Ammo>Weapon>Armor>Food>Misc'),3,2,6,5,1,4),
-            (_('Ammo>Chem>Weapon>Armor>Food>Misc'),3,2,5,4,1,6),
+            # weapon,armor,stimpak,chem,food/drink,mag,book,misc,card,ammo
+            (_('Chem>Ammo>Weapon>Armor>Food>Mag>Book>Misc>Card'),6,5,9,8,4,3,2,1,0,7),
+            (_('Ammo>Chem>Weapon>Armor>Food>Mag>Book>Misc>Card'),6,5,8,7,4,3,2,1,0,9),
+            (_('Weapon>Armor>Chem>Food>Mag>Book>Misc>Card>Ammo'),9,8,7,6,5,4,3,2,1,0),
             )
 
     #--Config Phase -----------------------------------------------------------
     #--Patch Phase ------------------------------------------------------------
     def getReadClasses(self):
         """Returns load factory classes needed for reading."""
-        return (MreAmmo,MreWeap,MreArmo,MreAlch)
+        return (MreAmmo,MreWeap,MreArmo,MreAlch,MreBook,MreMisc,MreCcrd)
 
     def getWriteClasses(self):
         """Returns load factory classes needed for writing."""
-        return (MreAmmo,MreWeap,MreArmo,MreAlch)
+        return (MreAmmo,MreWeap,MreArmo,MreAlch,MreBook,MreMisc,MreCcrd)
 
     def scanModFile(self,modFile,progress,patchFile):
         """Scans specified mod file to extract info. May add record to patch mod,
         but won't alter it."""
         mapper = modFile.getLongMapper()
-        for blockType in ('AMMO','WEAP','ARMO','ALCH'):
+        for blockType in ('AMMO','WEAP','ARMO','ALCH','BOOK','MISC','CCRD'):
             modBlock = getattr(modFile,blockType)
             patchBlock = getattr(patchFile,blockType)
             id_records = patchBlock.id_records
@@ -31036,10 +31833,11 @@ class NamesTweak_SortInventory(MultiTweakItem):
     def buildPatch(self,log,progress,patchFile):
         """Edits patch file as desired. Will write to log."""
         count = {}
-        cntWeap,cntArmo,cntStim,cntChem,cntFood,cntAmmo = self.choiceValues[self.chosen]
+        cntWeap,cntArmo,cntStim,cntChem,cntFood,cntMag,cntBook,cntMisc,cntCard,cntAmmo = self.choiceValues[self.chosen]
         keep = patchFile.getKeeper()
         reHead = re.compile(r"^\x07*")
-        for cnt,type in ((cntWeap,'WEAP'),(cntArmo,'ARMO'),(cntAmmo,'AMMO')):
+        for cnt,type in ((cntWeap,'WEAP'),(cntArmo,'ARMO'),(cntBook,'BOOK'),(cntMisc,'MISC'),(cntCard,'CCRD'),(cntAmmo,'AMMO')):
+            if cnt == 0: continue
             for record in getattr(patchFile,type).records:
                 if not record.full: continue
                 if record.full[0] in '+-=[]<>': continue
@@ -31055,8 +31853,13 @@ class NamesTweak_SortInventory(MultiTweakItem):
                 record.full = reHead.sub('\x07' * cntChem, record.full)
             elif record.etype == 11: # stimpak
                 record.full = reHead.sub('\x07' * cntStim, record.full)
-            else:                    # food/alcohol
+            elif record.etype == 13: # alcohol
                 record.full = reHead.sub('\x07' * cntFood, record.full)
+            else:
+                if record.soundConsume == (GPath('FalloutNV.esm'),0x07b73b): # magazine
+                    record.full = reHead.sub('\x07' * cntMag, record.full)
+                else: # food
+                    record.full = reHead.sub('\x07' * cntFood, record.full)
             keep(record.fid)
             srcMod = record.fid[0]
             count[srcMod] = count.get(srcMod,0) + 1
@@ -31065,70 +31868,6 @@ class NamesTweak_SortInventory(MultiTweakItem):
         for srcMod in modInfos.getOrdered(count.keys()):
             log('  * %s: %d' % (srcMod.s,count[srcMod]))
 
-class NamesTweak_AmmoWeight(MultiTweakItem):
-    #--Config Phase -----------------------------------------------------------
-    def __init__(self):
-        MultiTweakItem.__init__(self,_("Append Ammo Weight"),
-            _("Append ammo weight of FWE to tail of the ammo name."),
-            'AmmoWeight',
-            (_('BB (WG 0.01)'), ' (WG %s.%s)'),
-            (_('BB (0.01)'), ' (%s.%s)'),
-            )
-
-    #--Config Phase -----------------------------------------------------------
-    #--Patch Phase ------------------------------------------------------------
-    def getReadClasses(self):
-        """Returns load factory classes needed for reading."""
-        return (MreAmmo,MreFlst)
-
-    def getWriteClasses(self):
-        """Returns load factory classes needed for writing."""
-        return (MreAmmo,MreFlst)
-
-    def scanModFile(self,modFile,progress,patchFile):
-        """Scans specified mod file to extract info. May add record to patch mod,
-        but won't alter it."""
-        mapper = modFile.getLongMapper()
-        for blockType in ('AMMO','FLST'):
-            modBlock = getattr(modFile,blockType)
-            patchBlock = getattr(patchFile,blockType)
-            id_records = patchBlock.id_records
-            for record in modBlock.getActiveRecords():
-                if mapper(record.fid) not in id_records:
-                    record = record.getTypeCopy(mapper)
-                    patchBlock.setRecord(record)
-
-    def buildPatch(self,log,progress,patchFile):
-        """Edits patch file as desired. Will write to log."""
-        count = {}
-        format = self.choiceValues[self.chosen][0]
-        keep = patchFile.getKeeper()
-        weights = {}
-        weightRe = re.compile(r"^(.*)( \(WG \d+\.\d+\))$")
-        listEidRe = re.compile(r"^AmmoWeight(\d)(\d{2})List$")
-        for record in patchFile.FLST.records:
-            m = listEidRe.match(record.eid)
-            if m:
-                weight = format % (m.group(1), m.group(2))
-                for fid in record.fids:
-                    weights[fid] = weight
-        for record in patchFile.AMMO.records:
-            if not record.full: continue
-            weight = weights.get(record.fid)
-            if weight:
-                m = weightRe.match(record.full)
-                if m:
-                    record.full = m.group(1) + weight
-                else:
-                    record.full = record.full + weight
-                keep(record.fid)
-                srcMod = record.fid[0]
-                count[srcMod] = count.get(srcMod,0) + 1
-        #--Log
-        log(_('* %s: %d') % (self.label,sum(count.values())))
-        for srcMod in modInfos.getOrdered(count.keys()):
-            log('  * %s: %d' % (srcMod.s,count[srcMod]))
-
 #------------------------------------------------------------------------------
 class NamesTweaker(MultiTweaker):
     """Tweaks record full names in various ways."""
@@ -31150,7 +31889,6 @@ class NamesTweaker(MultiTweaker):
             ),
         NamesTweak_Potions(),
         NamesTweak_Weapons(),
-        NamesTweak_AmmoWeight(),
         ],key=lambda a: a.label.lower())
     tweaks.insert(0,NamesTweak_BodyTags())
     tweaks.append(NamesTweak_SortInventory())
@@ -35213,7 +35951,7 @@ class ContentsChecker(SpecialPatcher,Patcher):
             'LVLC':'LVLC,CREA,'.split(','),
             'LVLN':'LVLN,NPC_,'.split(','),
             #--LVLI will also be applied for containers.
-            'LVLI':'LVLI,ALCH,AMMO,APPA,ARMO,BOOK,CLOT,INGR,KEYM,LIGH,MISC,SGST,SLGM,WEAP,NOTE,MSTT,STAT'.split(','),
+            'LVLI':'LVLI,ALCH,AMMO,APPA,ARMO,BOOK,CLOT,INGR,KEYM,LIGH,MISC,SGST,SLGM,WEAP,NOTE,MSTT,STAT,CMNY,CCRD,IMOD,CHIP'.split(','),
             }
         self.contType_entryTypes['CONT'] = self.contType_entryTypes['LVLI']
         self.contType_entryTypes['CREA'] = self.contType_entryTypes['LVLI']

@@ -35693,7 +36431,7 @@ def initDefaultTools():
 
     tooldirs['FOMMPath'] = pathlist('GeMM','fomm.exe')
     #tooldirs['Tes4FilesPath'] = dirs['app'].join('TES4Files.exe')
-    tooldirs['FO3EditPath'] = dirs['app'].join('FO3Edit.exe')
+    tooldirs['FNVEditPath'] = dirs['app'].join('FNVEdit.exe')
     #tooldirs['Tes4LodGenPath'] = dirs['app'].join('TES4LodGen.exe')
     #tooldirs['Tes4GeckoPath'] = dirs['app'].join('Tes4Gecko.jar')
     #tooldirs['OblivionBookCreatorPath'] = dirs['mods'].join('OblivionBookCreator.jar')
@@ -35844,8 +36582,8 @@ def initOptions(bashIni):
                 elif compValue != compDefaultValue:
                     usedSettings[usedKey] = value
 
-    tooldirs['FO3MasterUpdatePath'] = tooldirs['FO3EditPath'].head.join('FO3MasterUpdate.exe')
-    tooldirs['FO3MasterRestorePath'] = tooldirs['FO3EditPath'].head.join('FO3MasterRestore.exe')
+    tooldirs['FNVMasterUpdatePath'] = tooldirs['FNVEditPath'].head.join('FNVMasterUpdate.exe')
+    tooldirs['FNVMasterRestorePath'] = tooldirs['FNVEditPath'].head.join('FNVMasterRestore.exe')
 
 def initLogFile():
     if inisettings['KeepLog'] == 0:
