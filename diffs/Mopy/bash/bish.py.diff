diff --git a/Mopy/bash/bish.py b/Mopy/bash/bish.py
index acb219f..79b4ec1 100644
--- a/Mopy/bash/bish.py
+++ b/Mopy/bash/bish.py
@@ -21,7 +21,7 @@
 #
 # =============================================================================
 
-"""This module provides a command line interface for working with Fallout3 files
+"""This module provides a command line interface for working with FalloutNV files
 and environment. Functions are defined here and added to the callables
 singleton. Callables.main() is then used to parse command line arguments.
 
@@ -35,7 +35,7 @@ Practice:
 
 Rational Names:
     Rational names is a mod that "Rationalizes" names of many objects in the
-    Fallout 3 world. Many of those names were generated here by functions working
+    Fallout New Vegas world. Many of those names were generated here by functions working
     on the basis of the eid or pre-existing name. Naturally these tend to be
     use-once functions, but they also tended to be modified and then used again.
 """
@@ -210,7 +210,7 @@ def convertFace(fileName,eid,fromEid,toEid):
     """Converts faces from one race to another."""
     init(3)
     #--Race faces
-    raceInfo = bosh.modInfos[GPath('Fallout3.esm')]
+    raceInfo = bosh.modInfos[GPath('FalloutNV.esm')]
     raceFaces = bosh.PCFaces.mod_getRaceFaces(raceInfo)
     fromRace = raceFaces.get(fromEid, bosh.PCFaces.PCFace())
     toRace   = raceFaces.get(toEid,   bosh.PCFaces.PCFace())
@@ -232,7 +232,7 @@ def convertFace(fileName,eid,fromEid,toEid):
 def importRacialEyesHair(srcMod,srcRaceEid,dstMod,dstRaceEid):
     """Copies eyes and hair from one race to another."""
     init(3)
-    if dstMod.lower() == 'fallout3.esm':
+    if dstMod.lower() == 'falloutnv.esm':
         raise "You don't REALLY want to overwrite Oblvion.esm, do you?"
     srcFactory = bosh.LoadFactory(False,bosh.MreRace)
     dstFactory = bosh.LoadFactory(True,bosh.MreRace)
@@ -476,7 +476,7 @@ def perfTest():
     total = 0.0
     from timeit import Timer
     for testClasses in ['bosh.MreClmt','bosh.MreCsty','bosh.MreIdle','bosh.MreLtex','bosh.MreRegn','bosh.MreSbsp']:
-        test = Timer('testClasses = (%s,);loadFactory = bosh.LoadFactory(False,*testClasses);modInfo = bosh.modInfos[GPath("Fallout3.esm")];modFile = bosh.ModFile(modInfo,loadFactory);modFile.load(True)' % testClasses, "import bosh;from bolt import GPath").timeit(1)
+        test = Timer('testClasses = (%s,);loadFactory = bosh.LoadFactory(False,*testClasses);modInfo = bosh.modInfos[GPath("FalloutNV.esm")];modFile = bosh.ModFile(modInfo,loadFactory);modFile.load(True)' % testClasses, "import bosh;from bolt import GPath").timeit(1)
         print testClasses, ":", test
         total += test
     print "total:", total
@@ -484,11 +484,11 @@ def perfTest():
     test = 0.0
     total = 0.0
     for testClasses in ['bosh.MreAchr,bosh.MreCell,bosh.MreWrld','bosh.MreAcre,bosh.MreCell,bosh.MreWrld','bosh.MreActi','bosh.MreAlch','bosh.MreAmmo','bosh.MreAnio','bosh.MreAppa','bosh.MreArmo','bosh.MreBook','bosh.MreBsgn','bosh.MreCell,bosh.MreWrld','bosh.MreClas','bosh.MreClot','bosh.MreCont','bosh.MreCrea','bosh.MreDial,bosh.MreInfo','bosh.MreDoor','bosh.MreEfsh','bosh.MreEnch','bosh.MreEyes','bosh.MreFact','bosh.MreFlor','bosh.MreFurn','bosh.MreGlob','bosh.MreGmst','bosh.MreGras','bosh.MreHair','bosh.MreIngr','bosh.MreKeym','bosh.MreLigh','bosh.MreLscr','bosh.MreLvlc','bosh.MreLvli','bosh.MreLvsp','bosh.MreMgef','bosh.MreMisc','bosh.MreNpc','bosh.MrePack','bosh.MreQust','bosh.MreRace','bosh.MreRefr,bosh.MreCell,bosh.MreWrld','bosh.MreRoad,bosh.MreCell,bosh.MreWrld','bosh.MreScpt','bosh.MreSgst','bosh.MreSkil','bosh.MreSlgm','bosh.MreSoun','bosh.MreSpel','bosh.MreStat','bosh.MreTes4','bosh.MreTree','bosh.MreWatr','bosh.MreWeap','bosh.MreWthr']:#,'"LAND"', '"PGRD"']:
-        test = Timer('testClasses = (%s,);loadFactory = bosh.LoadFactory(False,*testClasses);modInfo = bosh.modInfos[GPath("Fallout3.esm")];modFile = bosh.ModFile(modInfo,loadFactory);modFile.load(True)' % testClasses, "import bosh;from bolt import GPath").timeit(1)
+        test = Timer('testClasses = (%s,);loadFactory = bosh.LoadFactory(False,*testClasses);modInfo = bosh.modInfos[GPath("FalloutNV.esm")];modFile = bosh.ModFile(modInfo,loadFactory);modFile.load(True)' % testClasses, "import bosh;from bolt import GPath").timeit(1)
         print testClasses, ":", test
         total += test
     print "total:", total
-    ##print Timer('testClasses = (bosh.MreAchr,bosh.MreAcre,bosh.MreActi,bosh.MreAlch,bosh.MreAmmo,bosh.MreAnio,bosh.MreAppa,bosh.MreArmo,bosh.MreBook,bosh.MreBsgn,bosh.MreCell,bosh.MreClas,bosh.MreClmt,bosh.MreClot,bosh.MreCont,bosh.MreCrea,bosh.MreCsty,bosh.MreDial,bosh.MreDoor,bosh.MreEfsh,bosh.MreEnch,bosh.MreEyes,bosh.MreFact,bosh.MreFlor,bosh.MreFurn,bosh.MreGlob,bosh.MreGmst,bosh.MreGras,bosh.MreHair,bosh.MreIdle,bosh.MreInfo,bosh.MreIngr,bosh.MreKeym,bosh.MreLigh,bosh.MreLscr,bosh.MreLtex,bosh.MreLvlc,bosh.MreLvli,bosh.MreLvsp,bosh.MreMgef,bosh.MreMisc,bosh.MreNpc ,bosh.MrePack,bosh.MreQust,bosh.MreRace,bosh.MreRefr,bosh.MreRegn,bosh.MreRoad,bosh.MreSbsp,bosh.MreScpt,bosh.MreSgst,bosh.MreSkil,bosh.MreSlgm,bosh.MreSoun,bosh.MreSpel,bosh.MreStat,bosh.MreTes4,bosh.MreTree,bosh.MreWatr,bosh.MreWeap,bosh.MreWrld,bosh.MreWthr,"LAND", "PGRD");loadFactory = bosh.LoadFactory(False,*testClasses);modInfo = bosh.modInfos[GPath("Fallout3.esm")];modFile = bosh.ModFile(modInfo,loadFactory);modFile.load(True)', "import bosh;from bolt import GPath").timeit(1)
+    ##print Timer('testClasses = (bosh.MreAchr,bosh.MreAcre,bosh.MreActi,bosh.MreAlch,bosh.MreAmmo,bosh.MreAnio,bosh.MreAppa,bosh.MreArmo,bosh.MreBook,bosh.MreBsgn,bosh.MreCell,bosh.MreClas,bosh.MreClmt,bosh.MreClot,bosh.MreCont,bosh.MreCrea,bosh.MreCsty,bosh.MreDial,bosh.MreDoor,bosh.MreEfsh,bosh.MreEnch,bosh.MreEyes,bosh.MreFact,bosh.MreFlor,bosh.MreFurn,bosh.MreGlob,bosh.MreGmst,bosh.MreGras,bosh.MreHair,bosh.MreIdle,bosh.MreInfo,bosh.MreIngr,bosh.MreKeym,bosh.MreLigh,bosh.MreLscr,bosh.MreLtex,bosh.MreLvlc,bosh.MreLvli,bosh.MreLvsp,bosh.MreMgef,bosh.MreMisc,bosh.MreNpc ,bosh.MrePack,bosh.MreQust,bosh.MreRace,bosh.MreRefr,bosh.MreRegn,bosh.MreRoad,bosh.MreSbsp,bosh.MreScpt,bosh.MreSgst,bosh.MreSkil,bosh.MreSlgm,bosh.MreSoun,bosh.MreSpel,bosh.MreStat,bosh.MreTes4,bosh.MreTree,bosh.MreWatr,bosh.MreWeap,bosh.MreWrld,bosh.MreWthr,"LAND", "PGRD");loadFactory = bosh.LoadFactory(False,*testClasses);modInfo = bosh.modInfos[GPath("FalloutNV.esm")];modFile = bosh.ModFile(modInfo,loadFactory);modFile.load(True)', "import bosh;from bolt import GPath").timeit(1)
     sys.exit()
 
 #------------------------------------------------------------------------------
@@ -554,7 +554,7 @@ def csFunctions(fileName="CS Functions.txt"):
     print 'Read',fileName
     #--Page writer
     def groupLink(group):
-        group = re.sub('FOSE','[[:Category:Fallout3_Script_Extender|FOSE]]',group)
+        group = re.sub('NVSE','[[:Category:FalloutNV_Script_Extender|NVSE]]',group)
         group = re.sub('Pluggy','[[:Category:Pluggy|]]',group)
         group = re.sub('TSFC','[[:Category:TSFC|]]',group)
         return group
@@ -594,20 +594,20 @@ def csFunctions(fileName="CS Functions.txt"):
         print 'Wrote', fileName
     #--Dump pages
     dumpPage('GECK All.txt',records,None,
-        "[[Category:Scripting]]\nThis page lists all scripting functions including FOSE and FOSE plugin functions.")
+        "[[Category:Scripting]]\nThis page lists all scripting functions including NVSE and NVSE plugin functions.")
     dumpPage('GECK GECK.txt',records,'GECK',
-        "[[Category:Scripting]]\nThis page lists all native GECK scripting functions. For a more comprehensive list (including FOSE and FOSE plugin functions), see [[List of Functions]].")
-    dumpPage('GECK FOSE.txt',records,'FOSE',
-        "[[Category:Scripting]][[Category:Fallout 3 Script Extender]]\nThis page lists all functions for [[:Category:Fallout3_Script_Extender|]]. For a more comprehensive list (including native GECK and FOSE plugin functions), see [[List of Functions]].")
+        "[[Category:Scripting]]\nThis page lists all native GECK scripting functions. For a more comprehensive list (including NVSE and NVSE plugin functions), see [[List of Functions]].")
+    dumpPage('GECK NVSE.txt',records,'NVSE',
+        "[[Category:Scripting]][[Category:New Vegas Script Extender]]\nThis page lists all functions for [[:Category:FalloutNV_Script_Extender|]]. For a more comprehensive list (including native GECK and NVSE plugin functions), see [[List of Functions]].")
     dumpPage('GECK Pluggy.txt',records,'Pluggy',
-        "[[Category:Scripting]][[Category:Pluggy]]\nThis page lists all functions for [[:Category:Pluggy|]]. For a more comprehesive list of functions (including native GECK and other FOSE related functions), see [[List of Functions]].")
+        "[[Category:Scripting]][[Category:Pluggy]]\nThis page lists all functions for [[:Category:Pluggy|]]. For a more comprehesive list of functions (including native GECK and other NVSE related functions), see [[List of Functions]].")
     dumpPage('GECK TSFC.txt',records,'TSFC',
-        "[[Category:Scripting]][[Category:TSFC]]\nThis page lists all functions for [[:Category:TSFC|]]. For a more comprehesive list of functions (including native GECK and other FOSE related functions), see [[List of Functions]].")
+        "[[Category:Scripting]][[Category:TSFC]]\nThis page lists all functions for [[:Category:TSFC|]]. For a more comprehesive list of functions (including native GECK and other NVSE related functions), see [[List of Functions]].")
 
 #------------------------------------------------------------------------------
 @mainfunc
 def getIds(fileName=None):
-    """Gets fids and returns as a set. Primarily for analysis of Fallout3.esm.
+    """Gets fids and returns as a set. Primarily for analysis of FalloutNV.esm.
     NOTE: Does a low level read and hence can read fids of ALL records in all
     groups. Including CELLs WRLDs, etc."""
     def getRecordReader(ins,flags,size):
@@ -659,18 +659,18 @@ def getIds(fileName=None):
 #------------------------------------------------------------------------------
 @mainfunc
 def gmstIds(fileName=None):
-    """Updates map of GMST eids to fids in bash\db\Fallout3_ids.pkl, based either
+    """Updates map of GMST eids to fids in bash\db\FalloutNV_ids.pkl, based either
     on a list of new eids or the gmsts in the specified mod file. Updated pkl file
     is dropped in Mopy directory."""
     #--Data base
     import cPickle
-    fids = cPickle.load(GPath(r'bash\db\Fallout3_ids.pkl').open('r'))['GMST']
+    fids = cPickle.load(GPath(r'bash\db\FalloutNV_ids.pkl').open('r'))['GMST']
     maxId = max(fids.values())
     maxId = max(maxId,0xf12345)
     maxOld = maxId
     print 'maxId',hex(maxId)
     #--Eid list? - if the GMST has a 00000000 eid when looking at it in the cs with nothing 
-	# but fallout3.esm loaded you need to add the gmst to this list, rebuild the pickle and overwrite the old one.
+	# but falloutnv.esm loaded you need to add the gmst to this list, rebuild the pickle and overwrite the old one.
     for eid in ['fPlayerDeathReloadTime','iMapMarkerVisibleDistance','fVanityModeWheelMax','fChase3rdPersonZUnitsPerSecond',
                 'fAutoAimMaxDegreesMiss','iHoursToRespawnCell','fEssentialDeathTime','fJumpHeightMin','fPlayerPipBoyLightTimer',
                 'iAINumberActorsComplexScene','iHackingMaxWords','fGunShellLifetime','fGunShellCameraDistance','fGunDecalCameraDistance',
@@ -701,8 +701,8 @@ def gmstIds(fileName=None):
     #--Changes?
     if maxId > maxOld:
         outData = {'GMST':fids}
-        cPickle.dump(outData,GPath(r'Fallout3_ids.pkl').open('w'))
-        print "%d news gmst ids written to Fallout3_ids.pkl" % ((maxId - maxOld),)
+        cPickle.dump(outData,GPath(r'FalloutNV_ids.pkl').open('w'))
+        print "%d news gmst ids written to FalloutNV_ids.pkl" % ((maxId - maxOld),)
 
 #------------------------------------------------------------------------------
 @mainfunc
@@ -789,7 +789,7 @@ def findSaveRecord(srcName,fid):
 
 #------------------------------------------------------------------------------
 @mainfunc
-def renameArchives(root=r'C:\Program Files\Bethesda Softworks\Fallout 3\Downloads'):
+def renameArchives(root=r'C:\Program Files\Bethesda Softworks\Fallout New Vegas\Downloads'):
     """Renames TesSource archive files to sort a little better.
     E.g., change 12345-2.23-My Wicked Mod-TESSource.zip to My Wicked Mod 2.23.zip."""
     reTesSource = re.compile(r'^\d{4}-(\d[^-]*)-(.+)-TESSource.(zip|rar|7z|ace|exe)$',re.I)
@@ -886,7 +886,7 @@ def parseDials(srcName=None,dstName='Wrye Test.esp'):
     dstFile.askSave(True)
 
 @mainfunc
-def parseRecords(fileName='Fallout3.esm'):
+def parseRecords(fileName='FalloutNV.esm'):
     import psyco
     psyco.full()
     init(3)
